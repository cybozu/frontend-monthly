{"componentChunkName":"component---src-post-template-js","path":"/posts/2020-11","result":{"data":{"markdownRemark":{"html":"<h3 id=\"we-rendered-a-million-web-pages-to-learn-how-the-web-breaks\" style=\"position:relative;\"><a href=\"#we-rendered-a-million-web-pages-to-learn-how-the-web-breaks\" aria-label=\"we rendered a million web pages to learn how the web breaks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://medium.com/dailyjs/we-rendered-a-million-web-pages-to-learn-how-the-web-breaks-fdf12f5c505a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">We rendered a million web pages to learn how the web breaks</a></h3>\n<ul>\n<li>共有者:b4h0_c4t</li>\n</ul>\n<p>Web ページがどのようにして壊れるかを学ぶため、実際に発生しているエラーを調査、考察した記事。</p>\n<p>トップ 100 ドメインのルートページ 100 万件をレンダリングするスクリプトを使用して出力される未処理エラーを調査した結果、85%が <code class=\"language-text\">ReferenceError</code> <code class=\"language-text\">TypeError</code> <code class=\"language-text\">SyntaxError</code> 。\nまた、上記のエラーが実際に発生している理由として、そのほとんどがリソースの読み込み失敗に起因していると述べています。</p>\n<ul>\n<li>\n<p>How to resolve ReferenceError</p>\n<ul>\n<li>ReferenceError の多くはライブラリが生成したグローバル変数を読み込む時に発生している。</li>\n</ul>\n</li>\n<li>\n<p>What causes TypeError on live web site?</p>\n<ul>\n<li>TypeError の 97%は null もしくは undefined に起因している。</li>\n</ul>\n</li>\n<li>\n<p>What causes SyntaxError on live web site?</p>\n<ul>\n<li>開発中に遭遇する SyntaxError のほとんどは typo。デプロイされている Web サイトの場合はほとんどがネットワーク障害か JS のプログラム生成の失敗に起因している。</li>\n</ul>\n</li>\n</ul>\n<p>ほとんどのエラーと強く関連しているコードは <code class=\"language-text\">webpack</code> で、サンプルにした Web ページの 12%が 1 件以上のエラーを発生させている。</p>\n<p>エラーの出にくい Web サイトを作るためには静的検査が欲しいが、遅延バインディングの必要性もあってなかなか難しい。\nその点、TypeScript は検査時と実行時で性質を完全に分離しているので良いトレードオフかもしれない。\n最近は WebAssembly が登場し、JS レスで静的検査に寄せられる土台ができつつあるが、実行時にランタイム外との対話が必要なことにわ変わりなさそう。</p>\n<p>ランタイムの動的性質を許可しつつ、部分的に静的検査によって安全性を担保することが壊れにくい Web ページを作る鍵になるかもしれないと締めていました。</p>\n<hr>\n<h3 id=\"performance-·-microsofttypescript-wiki\" style=\"position:relative;\"><a href=\"#performance-%C2%B7-microsofttypescript-wiki\" aria-label=\"performance · microsofttypescript wiki permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Performance · microsoft/TypeScript Wiki</a></h3>\n<ul>\n<li>共有者:sakito</li>\n</ul>\n<p>この wiki 自体は TypeScript チームがコンパイル速度や実装の体験をよくするための情報として、去年ごろに公開していました。</p>\n<p>今年の秋ごろ<a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#writing-easy-to-compile-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">「Writing Easy-to-Compile Code」</a>の項目が追加されています。\nこの項目はコンパイルパフォーマンスがいい書き方を示してくれています。</p>\n<p>項目は下記 3 つに別れています。</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#writing-easy-to-compile-code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Preferring Interfaces Over Intersections</a></p>\n<ul>\n<li>Type を使った Intersection Types よりも interface の extends のほうがいいとのこと。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#using-type-annotations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using Type Annotations</a></p>\n<ul>\n<li>関数の戻り値の型は、明示的に型を定義したほうがコンパイル時間の節約になる。型推論は便利なので、コンパイルのボトルネックとなってる場合には試してねとのこと。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#using-type-annotations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Preferring Base Types Over Unions</a></p>\n<ul>\n<li>Union Type を使用するよりも sub types を使った方がよいとのこと(例のコードを見た方がわかりやすい)</li>\n</ul>\n</li>\n</ul>\n<p>interface と Type に関する記事は最近<a href=\"https://ncjamieson.com/prefer-interfaces/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">「TypeScript: Prefer Interfaces」</a>も出ており、\nType はインライン化されるので d.ts のサイズが肥大化するから interface を推奨するという内容の記事になっています。\nこれは d.ts を書く場合に覚えておくとよさそうです。</p>\n<p>TypeScript の Type か interface を使うか、型推論に任せるかは時と場合によるというのを前提での紹介でした！</p>\n<hr>\n<h3 id=\"vue-ref-の糖衣構文と-svelte\" style=\"position:relative;\"><a href=\"#vue-ref-%E3%81%AE%E7%B3%96%E8%A1%A3%E6%A7%8B%E6%96%87%E3%81%A8-svelte\" aria-label=\"vue ref の糖衣構文と svelte permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://zenn.dev/kalan/articles/6e96e13fb2b0447af4f6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Ref の糖衣構文と Svelte</a></h3>\n<ul>\n<li>共有者: nakajmg</li>\n</ul>\n<p>vue の rfc に<a href=\"https://composition-api.vuejs.org/api.html#ref\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">ref</code></a>の糖衣構文である<a href=\"https://github.com/vuejs/rfcs/blob/script-setup/active-rfcs/0000-script-setup.md#2-ref-sugar-makes-ref-usage-more-succinct\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(Svelte inspired な)<code class=\"language-text\">ref:</code>構文についての rfc</a>が出されました。この記事ではメリデメや Svelte との比較などについて書かれています。</p>\n<h4 id=\"rfc-の背景\" style=\"position:relative;\"><a href=\"#rfc-%E3%81%AE%E8%83%8C%E6%99%AF\" aria-label=\"rfc の背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rfc の背景</h4>\n<p>vue ではリアクティブな変数を定義するために<code class=\"language-text\">ref()</code>という関数を使います。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createComponent<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">,</span>\n      inc<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ref()</code>で作成した変数の取得/更新は<code class=\"language-text\">count.value</code>のように<code class=\"language-text\">.value</code>を経由する必要があります。TypeScript を採用していれば<code class=\"language-text\">.value</code>を経由しないで参照しようとするとエラーなりが出るので問題ないですが、そうでない場合は<code class=\"language-text\">ref()</code>で作られた変数と通常の(reactive じゃない）変数を区別する必要があります。</p>\n<h4 id=\"提案された構文\" style=\"position:relative;\"><a href=\"#%E6%8F%90%E6%A1%88%E3%81%95%E3%82%8C%E3%81%9F%E6%A7%8B%E6%96%87\" aria-label=\"提案された構文 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>提案された構文</h4>\n<p>この<code class=\"language-text\">.value</code>を使うのが面倒で冗長だよねというところから次のような糖衣構文が提案されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span>\n  <span class=\"token comment\">// declaring a variable that compiles to a ref ref: count = 1 function inc(){\" \"}</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the variable can be used like a plain value</span>\n    count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// access the raw ref object by prefixing with $ console.log($count.value)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/rfcs/blob/script-setup/active-rfcs/0000-script-setup.md#2-ref-sugar-makes-ref-usage-more-succinct\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/vuejs/rfcs/blob/script-setup/active-rfcs/0000-script-setup.md#2-ref-sugar-makes-ref-usage-more-succinct</a></p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/label\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ラベル付き文</a>の構文を使って reactive な変数を定義し、<code class=\"language-text\">.value</code>なしに参照しています。</p>\n<p>このコードはコンパイルされて 👆 にあるようなコードに変換されます。</p>\n<h4 id=\"javascript-のセマンティクスとトレードオフ\" style=\"position:relative;\"><a href=\"#javascript-%E3%81%AE%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%82%AF%E3%82%B9%E3%81%A8%E3%83%88%E3%83%AC%E3%83%BC%E3%83%89%E3%82%AA%E3%83%95\" aria-label=\"javascript のセマンティクスとトレードオフ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript のセマンティクスとトレードオフ</h4>\n<p><code class=\"language-text\">.value</code>を経由するようになっているのは JavaScript の言語的な制約からきているもので、vue は JavaScript のセマンティクスを変更/拡張することなくリアクティブを実現するためにこうしています。\n今回の rfc は、JavaScript のセマンティクスから逸れてると認識しながらも、開発者の体験を向上させるためにトレードオフを行う余地があるのではという考えから提出されました。</p>\n<h4 id=\"感想\" style=\"position:relative;\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h4>\n<p>自分は次の理由からあまりいい提案ではないように思います。</p>\n<ul>\n<li>\n<p>vue 独自の構文である</p>\n<ul>\n<li>どんどん増えていきそう</li>\n<li>JavaScript エコシステムへの負荷(Linter とかエディタ）</li>\n</ul>\n</li>\n<li>本来のラベル付き文から逸脱している</li>\n<li>コンパイル前後のコードに差異が結構ある</li>\n</ul>\n<p>この糖衣構文によって開発者の体験が短期的には向上するかもしれませんが、解決したい課題に対してデメリットが上回っていると感じています。（この rfc に限らず vue が<code class=\"language-text\">&lt;script setup></code>など、独自の糖衣構文的なものを追加してくる傾向があること自体にあまりいい印象を持っていないです。）</p>\n<hr>\n<h3 id=\"how-web-apps-work--marks-dev-blog\" style=\"position:relative;\"><a href=\"#how-web-apps-work--marks-dev-blog\" aria-label=\"how web apps work  marks dev blog permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://blog.isquaredsoftware.com/series/how-web-apps-work/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How Web Apps Work | Mark's Dev Blog</a></h3>\n<ul>\n<li>共有者:toshi-toma</li>\n</ul>\n<p>Redux のメンテーである<a href=\"https://twitter.com/acemarke\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mark Erikson</a>による、Web 開発の概念や用語、ツール、技術について説明するシリーズ。Web 開発は様々な技術が出てくるので、それらがなぜ必要なのか、どう関係してるのかを説明してる。そして、必要に応じて深く調べれるように別記事への導線も用意されている。</p>\n<p>個人的に、Redux のドキュメントの英語読みやすいなーと思ってたので、網羅的に書かれていて、かつ読みやすい記事でありがたいなと思いました。</p>\n<p>テーマごとに全 5 記事ある</p>\n<ul>\n<li>\n<p><a href=\"https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-http-server/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP and Servers</a></p>\n<ul>\n<li>HTTP とアプリケーションサーバーの話</li>\n<li>触れてる内容: HTTP, IP アドレス, DNS, HTTP リクエスト, HTTP レスポンス, ヘッダー, HTTP メソッド, ステータスコード, クッキー, アプリケーションサーバー(リクエストの処理、ルーティング、静的ファイル、動的な Web アプリケーションサーバー)</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-client-dev-deployment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Client Development and Deployment</a></p>\n<ul>\n<li>JS メインのフロントエンド開発の話</li>\n<li>触れてる内容: JS の歴史, JS モジュールフォーマット, コンパイル(トランスパイル), バンドル, 開発環境ツール(Node.js), デプロイ, ポリフィル, Code Splitting</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-html-css/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Browsers, HTML, and CSS</a></p>\n<ul>\n<li>ブラウザと HTML, CSS の話</li>\n<li>触れてる内容: ブラウザ, メジャーブラウザ, HTML, タグや属性, セマンティクス, CSS, 構文とセレクタ, ページレイアウト(ボックスモデル, display, position, flexbox, grid), レスポンシブ</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-javascript-dom/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript and the DOM</a></p>\n<ul>\n<li>JS の幅広い基本的な内容と DOM の話</li>\n<li>触れてる内容: ECMAScript, JS の概要(構文, データタイプ, 組み込み関数, this, Class, タイマーとイベントループ, 非同期処理), イミュータブル, DOM, jQuery</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.isquaredsoftware.com/2020/11/how-web-apps-work-ajax-apis-data/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AJAX, APIs, and Data Transfer</a></p>\n<ul>\n<li>クライアントとサーバー間でデータをやり取りする話</li>\n<li>触れてる内容: JSON, Ajax, ポーリング, WebSockets, CORS, REST, RPC, GraphQL, ブラウザストレージ, クライアントルーティング</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"tc39proposal-js-module-blocks\" style=\"position:relative;\"><a href=\"#tc39proposal-js-module-blocks\" aria-label=\"tc39proposal js module blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/tc39/proposal-js-module-blocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tc39/proposal-js-module-blocks</a></h3>\n<ul>\n<li>共有者: @sosukesuzuki</li>\n</ul>\n<p>JS Modules Blocks は先日の TC39 ミーティングで <a href=\"https://twitter.com/DasSurma/status/1329059832150831111\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stage 1 になった</a> プロポーザルです。</p>\n<p>このプロポーザルは、ファイルを隔てずにモジュールを定義できるインラインモジュール式(<code class=\"language-text\">InlineModuleExpression</code>)という新しい構文を導入します。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> module <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>この <code class=\"language-text\">module {}</code> という部分が新しく導入される構文です。式なので、結果をそのまま値として扱うことが可能です。</p>\n<p>ここで定義された<code class=\"language-text\">m</code>は <code class=\"language-text\">import(...)</code> で import できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> module <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello</span></code></pre></div>\n<p>まだ Stage 1 なのでこれから仕様が大幅に変更される可能性はありますが、実用性もあり面白い提案なので、注目しておくと良さそうです。</p>\n<hr>\n<h3 id=\"webassembly-ハンズオン-実際に動かして基礎を学ぶ（翻訳）\" style=\"position:relative;\"><a href=\"#webassembly-%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3-%E5%AE%9F%E9%9A%9B%E3%81%AB%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E5%9F%BA%E7%A4%8E%E3%82%92%E5%AD%A6%E3%81%B6%EF%BC%88%E7%BF%BB%E8%A8%B3%EF%BC%89\" aria-label=\"webassembly ハンズオン 実際に動かして基礎を学ぶ（翻訳） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://techracho.bpsinc.jp/hachi8833/2020_11_02/97774\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WebAssembly ハンズオン: 実際に動かして基礎を学ぶ（翻訳）</a></h3>\n<ul>\n<li>共有者: @zaki___yama</li>\n</ul>\n<p>原文は 8 月頃に投稿された <a href=\"https://evilmartians.com/chronicles/hands-on-webassembly-try-the-basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hands-on WebAssembly: Try the basics — Martian Chronicles, Evil Martians’ team blog</a> という記事。</p>\n<p>ハンズオンと書いてますが手を動かす成分は少なめ。環境構築も Docker で提供されてるものを使うので楽です。（何をインストールしてるのかわかりづらいというのはある）</p>\n<p>内容としては</p>\n<ul>\n<li><code class=\"language-text\">clang</code> を使った素朴なやり方で C のソースを wasm にコンパイルする</li>\n<li><code class=\"language-text\">wasm-objdump</code> で wasm の中身を確認する</li>\n<li>Bynarien (<code class=\"language-text\">wasm-opt</code>) で wasm のバイナリサイズを圧縮する</li>\n<li>WebAssembly Binary toolkit (wabt) で wasm を wat に変換し、中身を確認する</li>\n<li>Emscripten でコンパイルしてみる</li>\n<li>同じことを Rust でやってみる（ライブラリを使ったやり方）</li>\n</ul>\n<p>という感じで、C メインで Rust はおまけ程度。</p>\n<p>大部分は C で wasm 書く予定がなければ必要ない情報かなーと思いましたが、個人的には</p>\n<ul>\n<li>「コンパイラの即席入門(Compilers 101)」で説明されてるコンパイラの概要\n（コンパイラはソースコードをパースして一旦内部表現(IR)に変換する。WebAssembly はどんなブラウザでも理解できる内部表現という位置づけ）</li>\n<li>\n<p>「ドラゴンのはらわた（Dragon guts）」</p>\n<ul>\n<li>テキスト形式の <code class=\"language-text\">.wat</code> ファイルの読み方</li>\n</ul>\n</li>\n</ul>\n<p>あたりが面白かったです。</p>\n<p>元の C の関数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>を wat にすると、</p>\n<div class=\"gatsby-highlight\" data-language=\"wat\"><pre class=\"language-wat\"><code class=\"language-wat\">(func (;1;) (type 0) (param i32) (result i32)\n  i32.const 2\n  local.get 0\n  i32.const 4\n  i32.rem_s\n  i32.sub\n  local.get 0\n  i32.const 2\n  i32.rem_s\n  i32.mul)</code></pre></div>\n<p>となり、これは</p>\n<ol>\n<li>整数値 <code class=\"language-text\">2</code> をスタックに push する（<code class=\"language-text\">i32.const 2</code>）</li>\n<li>関数の最初のパラメーターをスタックに push（<code class=\"language-text\">local.get 0</code>）</li>\n<li>整数値 <code class=\"language-text\">4</code> をスタックに push（<code class=\"language-text\">i32.const 4</code>）</li>\n<li>スタックから 2 つの値を削除して 1 番目の値を 2 番目の値で割った余りをスタックに push する（<code class=\"language-text\">i32.rem_s</code>）</li>\n</ol>\n<p>が <code class=\"language-text\">x % 4</code> に相当します。</p>\n<hr>\n<h3 id=\"dropping-support-for-ie11-is-progressive-enhancement-·-the-ethically-trained-programmer\" style=\"position:relative;\"><a href=\"#dropping-support-for-ie11-is-progressive-enhancement-%C2%B7-the-ethically-trained-programmer\" aria-label=\"dropping support for ie11 is progressive enhancement · the ethically trained programmer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://blog.carlmjohnson.net/post/2020/time-to-kill-ie11/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dropping Support For IE11 Is Progressive Enhancement · The Ethically-Trained Programmer</a></h3>\n<ul>\n<li>共有者: @pirosikick</li>\n</ul>\n<p>IE11 をサポートする労力を JavaScript を無効にしているユーザーのために使ったほうがいいんじゃないかという話。</p>\n<ul>\n<li>\n<p>IE11 は減少傾向だが、JS 無し環境は無くならない</p>\n<ul>\n<li>JS をダウンロードしている間はみんな JS 無し環境</li>\n<li>広告ブロッカーの普及によって、JS 無し・JS が壊れている人は一定数居る</li>\n</ul>\n</li>\n<li>\n<p>QA チームがない場合、問い合わせが無いだけで IE11 で壊れているかも</p>\n<ul>\n<li>Babel/Autoprefixer などによるトラスパイルだけでは不完全で、API の polyfill、IE11 特有のバグへの対応など、IE11 対応するなら IE11 で QA する必要がある</li>\n</ul>\n</li>\n<li>\n<p>IE11 サポートする代わりに、script タグの module/nomodule を使って Progressive Enhancement しよう</p>\n<ul>\n<li>nomodule 側はできる限る JS を少なくするべき。</li>\n<li>理想は全く無しだが、実際は広告や Analitics だけ JS 使うことになりそう</li>\n<li>Analitics に IE11 ユーザーが出続ける限り、ちゃんと動いているはず</li>\n</ul>\n</li>\n<li>\n<p>JS 無しユーザーのために特別な実装するほうが大変じゃない？</p>\n<ul>\n<li>基本は、JS 無しユーザー用のクラス(<code class=\"language-text\">.has-old-js</code>)を使って、要素の表示・非表示するだけ</li>\n<li>最近の JS は十分にモジュール化されているはず</li>\n</ul>\n</li>\n<li>\n<p>筆者の具体例</p>\n<ul>\n<li>モーダルが IE11 では出ない、静的なレイアウトへの切り替え、検索機能は Google に送信するフォームへ切り替え</li>\n</ul>\n</li>\n</ul>\n<p>※余談：ブログが「The Ethically-Trained Programmer（倫理的に訓練されたプログラマ）」で favicon が「倫」で笑った</p>\n<hr>\n<h3 id=\"use-css-variables-instead-of-react-context--epic-react-by-kent-c-dodds\" style=\"position:relative;\"><a href=\"#use-css-variables-instead-of-react-context--epic-react-by-kent-c-dodds\" aria-label=\"use css variables instead of react context  epic react by kent c dodds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://epicreact.dev/css-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Use CSS Variables instead of React Context | Epic React by Kent C. Dodds</a></h3>\n<ul>\n<li>共有者: @pirosikick</li>\n</ul>\n<p>CSS in JS の React Context を使ったテーマ機能（例：<a href=\"https://styled-components.com/docs/advanced#theming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">styled-components の ThemeProvider</a>）より、CSS Variables を使おうという話。</p>\n<ul>\n<li>開発者体験的には違いはない（個人的には CSS Variables のほうがシンプルで好き）</li>\n<li>テーマ切替時に再描画するコンポーネント数が React Context のほうが多い</li>\n</ul>\n<hr>\n<h3 id=\"building-a-type-checked-url-router-from-scratch\" style=\"position:relative;\"><a href=\"#building-a-type-checked-url-router-from-scratch\" aria-label=\"building a type checked url router from scratch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://ja.nsommer.dk/articles/type-checked-url-router.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building a type checked url router from scratch</a></h3>\n<ul>\n<li>共有者: @shisama_</li>\n</ul>\n<p>SPA のルーティングに設定する URL の型を TypeScript 4.1 で新しく追加された Template Literal Types を使って検査する方法の紹介です。</p>\n<p>Template Literal Types については<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/#template-literal-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Announcing TypeScript 4.1</a>の記事で紹介されています。</p>\n<p>記事中の型宣言から一部抜き出すと次のように Template Literal で文字列から infer で値を抜き出すことが出来ます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TemplateVariables<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">infer</span> Variable<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token operator\">?</span> TemplateVariables<span class=\"token operator\">&lt;</span>Start<span class=\"token operator\">></span> <span class=\"token operator\">|</span> Variable\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">param</span> <span class=\"token operator\">=</span> TemplateVariables<span class=\"token operator\">&lt;</span><span class=\"token string\">\"/api/users/:id\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// param = \"id\"</span></code></pre></div>\n<p>この記事の最終的な目的はコンポーネントに紐付けたパスのパラメータとコンポーネントの Props の型が同じになるようにしたいということです。</p>\n<p>記事中から一部抜粋した例をあげます。\n以下のようなコンポーネントがあったとき、</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type MyDogProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string\n  breed<span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyDog <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> breed <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> MyDogProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;p>My dog's name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and it's a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>breed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p>\n   &lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Link</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> route<span class=\"token operator\">:</span> routes<span class=\"token punctuation\">.</span>home<span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">\"Back to home\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p></span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>以下のようなルーティング定義をしておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  home<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Home<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>MyDog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"my-dog/:name/:breed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  search<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Search<span class=\"token punctuation\">,</span> <span class=\"token string\">\"search/:query\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注目してほしいのが、<code class=\"language-text\">my-dog/:name/:breed</code>の<code class=\"language-text\">name</code>と<code class=\"language-text\">breed</code>です。これえは MyDogProps のキーと同じです。なので、たとえば以下のように MyDogProps のキー名が違う場合エラーになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyDogProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  breed_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>MyDog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"my-dog/:name/:breed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// breed というプロパティはないためエラー</span></code></pre></div>\n<p>また、Props には定義されているのにパスには存在しない場合もエラーになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyDogProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  breed<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>MyDog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"my-dog/:name/:breed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// age がないためエラー</span></code></pre></div>\n<p>逆に Props にないパラメータをパスに含めてもエラーになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyDogProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  breed<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dog<span class=\"token operator\">:</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>MyDog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"my-dog/:name/:breed/:age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Propsにageはないためエラー</span></code></pre></div>\n<p>このようにコンポーネントが期待するパラメータが正しく渡ってくることを事前にチェックすることができます。</p>\n<hr>","frontmatter":{"title":"Cybozu Frontend Monthly","date":"2020-11-24T17:00:00+09:00","no":5,"connpass":"https://cybozu.connpass.com/event/196103/","streamUrl":"https://www.youtube.com/watch?v=x6mhjoYoGMo","hashTag":"#サイボウズフロントエンドマンスリー","members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@toshi__toma","link":"https://twitter.com/toshi__toma"},{"name":"@zaki___yama","link":"https://twitter.com/zaki___yama"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"},{"name":"@__sosukesuzuki","link":"https://twitter.com/__sosukesuzuki"}],"guest":null}}},"pageContext":{"id":"3cbdadbf-7c1f-568a-8a33-d34febfad8f2"}},"staticQueryHashes":["764694655"]}