{"componentChunkName":"component---src-post-template-js","path":"/posts/2021-07","result":{"data":{"markdownRemark":{"html":"<h3 id=\"150万mauのnuxtjs製サービスを機能開発を止めずに1ヶ月1人でnextjsに置き換えた話\" style=\"position:relative;\"><a href=\"#150%E4%B8%87mau%E3%81%AEnuxtjs%E8%A3%BD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E6%A9%9F%E8%83%BD%E9%96%8B%E7%99%BA%E3%82%92%E6%AD%A2%E3%82%81%E3%81%9A%E3%81%AB1%E3%83%B6%E6%9C%881%E4%BA%BA%E3%81%A7nextjs%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%9F%E8%A9%B1\" aria-label=\"150万mauのnuxtjs製サービスを機能開発を止めずに1ヶ月1人でnextjsに置き換えた話 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://zenn.dev/yuku/articles/a9edd53e13bb26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">150万MAUのNuxt.js製サービスを機能開発を止めずに1ヶ月&#x26;1人でNext.jsに置き換えた話</a></h3>\n<ul>\n<li>共有者: <a href=\"https://github.com/MonchiFC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">yuku</a></li>\n</ul>\n<p>Ubie の[AI受診相談ユビー]を Nuxt.js から Next.js に置き換えた話。機能開発を止めないリプレイス事例として参考になると嬉しい。</p>\n<ul>\n<li>Nuxt.js と Next.js を共存させて1ヶ月で完全移行</li>\n<li>インフラ層で path を見て Nuxt と Next にルーティング</li>\n<li>Local Storage を通したステートのマイグレーション</li>\n<li>\n<p>0→1の立ち上げにおいてはコミュニケーションコストが課題になる</p>\n<ul>\n<li>コミュニケーションコストのかからない壁打ち相手がいるととってもハッピー</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"just-in-time-mode---tailwind-css\" style=\"position:relative;\"><a href=\"#just-in-time-mode---tailwind-css\" aria-label=\"just in time mode   tailwind css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://tailwindcss.com/docs/just-in-time-mode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Just-in-Time Mode - Tailwind CSS</a></h3>\n<ul>\n<li>共有者: jmblog</li>\n</ul>\n<p>業務で Next.js + Tailwind CSS を使っているのですが、Just-in-Time（JIT）モードが便利だったので共有します。</p>\n<ul>\n<li>Tailwind CSS は 本番ビルド時に PurgeCSS を利用して未使用のスタイルをすべて削除するため、生成されるCSSファイルは最小限になります。</li>\n<li>ただし、PurgeCSS は毎回動かすとビルドに時間がかかりすぎるため、開発時には実行されません。</li>\n<li>その結果、開発時に生成されるCSSファイルのサイズは非常に大きくなります。場合によっては、Chrome DevTools の動きが遅くなるほど巨大になることもあります。</li>\n<li>また、開発と本番で異なるCSSが使われることになるので、PurgeCSS によって意図しないスタイルの削除が行われたとしても、本番でしか気づくことができませんでした。</li>\n<li>Just-in-Timeモードを使うとこれらを解決することができます。</li>\n<li>\n<p>また、それ以外にも以下のような利点があります</p>\n<ul>\n<li><code class=\"language-text\">active</code> や <code class=\"language-text\">disabled</code> などの Variants を設定ファイルで有効にしなくても使えるようになる</li>\n<li><code class=\"language-text\">top-[-113px]\b</code>, <code class=\"language-text\">border-[#c1c1c1]</code> みたいなクラスを書くことができるようになる</li>\n</ul>\n</li>\n<li>JITモードは、実験的な機能として <code class=\"language-text\">@tailwindcss/jit</code> というライブラリとして提供されていましたが、2021/4 にリリースされた Tailwind CSS v2.1 から Tailwind CSS のコア機能として取り込まれています。</li>\n</ul>\n<p>なお、Next.js v10.2.0 で JIT モードを試したところ、うまく動きませんでした。v10.2.2 以上、v11 であれば問題ないようです。</p>\n<p><a href=\"https://zenn.dev/jimbo/scraps/693d65554843f3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js v10でTailwind CSSのJust-in-Timeモードがうまく動かない</a></p>\n<hr>\n<h3 id=\"content-editableでwysiwygエディタ作るの楽しい！---maru-source\" style=\"position:relative;\"><a href=\"#content-editable%E3%81%A7wysiwyg%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E4%BD%9C%E3%82%8B%E3%81%AE%E6%A5%BD%E3%81%97%E3%81%84%EF%BC%81---maru-source\" aria-label=\"content editableでwysiwygエディタ作るの楽しい！   maru source permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://blog.h13i32maru.jp/entry/2021/07/08/182316\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Content EditableでWYSIWYGエディタ作るの楽しい！ - maru source</a></h3>\n<ul>\n<li>共有者: pirosikick</li>\n</ul>\n<p>Ubie Discoveryのカルテエディタの話。Content Editableを使ったWYSIWYGエディタの作り方について。\nProseMirror等のリッチテキストエディタ用のOSSを使わずに、一から作っていてすごい。\nエディタの話だけではなく、設計の話、設計をどのようにドキュメントに残すかなども書いており、楽しく読めました。</p>\n<hr>\n<h3 id=\"astro\" style=\"position:relative;\"><a href=\"#astro\" aria-label=\"astro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://astro.build/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Astro</a></h3>\n<ul>\n<li>共有者: <a href=\"https://github.com/MonchiFC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">yuku</a></li>\n</ul>\n<p>Snowpack チームが作った静的サイトジェネレータ。</p>\n<ul>\n<li>\n<p>フレームワーク非依存で、React でも Vue でも Svelte でも書ける</p>\n<ul>\n<li><a href=\"https://docs.astro.build/reference/renderer-reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Renderer</a> を実装するとなんでも対応できる</li>\n</ul>\n</li>\n<li><a href=\"https://docs.astro.build/core-concepts/astro-components\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">独自のコンポーネント記法</a>も持っている</li>\n<li>TypeScript や Markdown など色々とデフォルト対応</li>\n<li>デフォルトではランタイム JS なしの静的 HTML を出力</li>\n<li>\n<p>JSが必要なコンポーネントは明示することで<a href=\"https://docs.astro.build/core-concepts/component-hydration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">部分的にハイドレーション</a>できる</p>\n<ul>\n<li>ロード時にハイドレーションしたり <code class=\"language-text\">&lt;MyComponent client:load /></code></li>\n<li>IntersectionObserver に引っかかったときにしたり <code class=\"language-text\">&lt;MyComponent client:visible /></code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"creating-an-accessible-autocomplete-experience\" style=\"position:relative;\"><a href=\"#creating-an-accessible-autocomplete-experience\" aria-label=\"creating an accessible autocomplete experience permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://react-spectrum.adobe.com/blog/building-a-combobox.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Creating an accessible autocomplete experience</a></h3>\n<ul>\n<li>共有者: @sakito</li>\n</ul>\n<p>Adobeのデザインシステムである<a href=\"https://spectrum.adobe.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spectrum</a>をReact実装した<a href=\"https://react-spectrum.adobe.com/react-spectrum/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Spectrum</a>から出た記事。\n<a href=\"https://react-spectrum.adobe.com/react-spectrum/ComboBox.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ComboBox</a>と<a href=\"https://react-spectrum.adobe.com/react-aria/useComboBox.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useComboBox</a>をリリースしたので、どのようなことを考えて実装されたのか解説されている記事です。</p>\n<p>記事では大まかにこのようなことが述べられています。</p>\n<ul>\n<li>\n<p>ComboBoxの難しさ</p>\n<ul>\n<li>ComboBoxは単純なUIに見えるが、タッチ、クリック、キーボード、マウスなどさまざまなイベントでの動作</li>\n<li>入力フォームと入力候補を表示する2つのUIを制御するタイミングや難しさ</li>\n</ul>\n</li>\n<li>\n<p>Mobile experience</p>\n<ul>\n<li>iOS Safariのキーボードの出現やページスクロールの挙動について</li>\n</ul>\n</li>\n<li>\n<p>Accessibility </p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WAI-ARIA 1.2 combobox example</a>に沿って実装したが、いくつかの問題があった紹介</li>\n<li>リストのUIにReact Portalを使用することで、DOMの最後にポータル化されることによる問題</li>\n<li>モバイル実装時のスクリーンリーダーとの関係</li>\n<li>さまざまなスクリーンリーダーの挙動差</li>\n<li>VoiceOverのサポート</li>\n</ul>\n</li>\n</ul>\n<p>実装時に気をつけたいことが色々と紹介されているので、ComboBoxの実装以外でも参考になる記事でした。</p>\n<hr>\n<h3 id=\"using-webassembly-threads-from-c-c-and-rust\" style=\"position:relative;\"><a href=\"#using-webassembly-threads-from-c-c-and-rust\" aria-label=\"using webassembly threads from c c and rust permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://web.dev/webassembly-threads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Using WebAssembly threads from C, C++ and Rust</a></h3>\n<ul>\n<li>共有者: @b4h0_c4t</li>\n</ul>\n<p>WebAssembly を使ってマルチスレッドアプリケーションを構築する話。</p>\n<p>前半は Web Worker を用いた WebAssembly 上でのメモリ管理の歴史や WebAssembly atomics と呼ばれる単一の SharedArrayBuffer のアクセス衝突を回避する機能の解説をしています。</p>\n<p>後半では、C、C++、Rust を用いたマルチスレッドアプリケーションの例とその解説をしています。\n解説中では、pthread や std::thread といった各言語の標準スレッドライブラリを利用して解説を行なっている他、各セクション毎にいくつかの要点が記述されているので今後 WebAssembly を介して利用したい言語があれば読んでみることをお勧めします。</p>\n<hr>\n<h3 id=\"petite-vue\" style=\"position:relative;\"><a href=\"#petite-vue\" aria-label=\"petite vue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/vuejs/petite-vue\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">petite-vue</a></h3>\n<ul>\n<li>共有者: nakajmg</li>\n</ul>\n<p>Vue のサブセット的なものがリリースされました。通常の Vue の機能制限版的なものですが、Vueのv1系で行ってたような使い方ができます。<code class=\"language-text\">script</code>でグローバルに <code class=\"language-text\">PetiteVue</code>　を生やす以外にも、次のように　ESM　で　import　して使うといったこともできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createApp <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'https://unpkg.com/petite-vue?module'</span>\n  <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>petite-vue は <code class=\"language-text\">computed</code> など<a href=\"https://github.com/vuejs/petite-vue#not-supported\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">使えない機能</a>があるので、そのあたりを考慮した上で用途を考える必要がありそうです。</p>\n<p>Vue の easy な使い方をカバーする役割としてこういったビルドを出してくるのは面白いアプローチだなと思いました。</p>\n<hr>\n<h3 id=\"prisma-day-2021\" style=\"position:relative;\"><a href=\"#prisma-day-2021\" aria-label=\"prisma day 2021 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.prisma.io/day\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma Day 2021</a></h3>\n<ul>\n<li>共有者: @mugi_uno</li>\n</ul>\n<p><a href=\"https://www.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prisma</a>のオンラインカンファレンス Prisma Day 2021 が 6/29-30 で開催されました。\nセッションの動画はすべて YouTube にアップされています。</p>\n<p><a href=\"https://twitter.com/kanasugi_y\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@kanasugi_y</a> さんによる日本語でのワークショップも開催され、\n同様に動画がアップされているので、Prismaの入門として良さそうです。</p>\n<p>最後のセッション \"What's next for Prisma?\" では、今後のロードマップに関する紹介がありました。<br>\n<a href=\"https://www.youtube.com/watch?v=vTgvePrccas\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?v=vTgvePrccas</a></p>\n<p>言及されていたものから幾つか抜粋します。</p>\n<ul>\n<li>\n<p>Data Plane</p>\n<ul>\n<li>大規模プロジェクトにおいて、複数DBとのコネクションや、サーバーレス利用時のコネクションプーリングといった課題を解決する</li>\n<li>Prisma Data Proxy という名称でアーリーアクセスへ申し込める</li>\n</ul>\n</li>\n<li>\n<p>Control Plane</p>\n<ul>\n<li>Data Plane と接続し、マイグレーション履歴の参照や、データ・スキーマの閲覧、クエリコンソールといった機能をクラウド上で提供する</li>\n<li><a href=\"https://cloud.prisma.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://cloud.prisma.io/</a> からアーリーアクセス版を利用できる</li>\n</ul>\n</li>\n<li>\n<p>Referential actions</p>\n<ul>\n<li>Delete,・Updateに連動し、CascadeやNull/Default値のセットといった処理を可能にする</li>\n<li>2.26.0 以降、Preview版として利用可能になっている。</li>\n</ul>\n</li>\n<li>\n<p>MongoDBコネクタのサポート</p>\n<ul>\n<li><code class=\"language-text\">@unique</code> の取り扱いなどは今後のロードマップに入ってる。</li>\n<li>2.27.0 以降、Preview版として利用可能になっている。</li>\n</ul>\n</li>\n</ul>\n<p>上記を含む、現在のロードマップは以下で確認できます。<br>\n<a href=\"https://www.notion.so/Prisma-Roadmap-50766227b779464ab98899accb98295f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.notion.so/Prisma-Roadmap-50766227b779464ab98899accb98295f</a></p>\n<hr>\n<h3 id=\"the-performance-effects-of-too-much-lazy-loading\" style=\"position:relative;\"><a href=\"#the-performance-effects-of-too-much-lazy-loading\" aria-label=\"the performance effects of too much lazy loading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://web.dev/lcp-lazy-loading/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The performance effects of too much lazy-loading</a></h3>\n<ul>\n<li>共有者: @shisama_</li>\n</ul>\n<p>画像のlazy-loadingはパフォーマンス向上には有効な方法だが、ページ内のすべての画像をlazy-loadingすると、パフォーマンスが悪くなることもある。\nWordPressで作られたページで実験したところ、ファーストビュー内の画像はlazy-loadingしないほうが良いパフォーマンス結果を得られた。</p>\n<p>以下、記事本文まとめ</p>\n<ul>\n<li>lazy-loadingは画像の読み込みを遅延させてパフォーマンスを改善するためには良い方法だが、使いすぎると逆にパフォーマンスを悪化させることもある</li>\n<li>HTTPアーカイブによると、すでにWebサイトの17%でlazy-loadが使われていて、急速に利用拡大している</li>\n<li>内訳は84%がWordPress、他のCMSが2%、残り14%となっている</li>\n<li>lazy-loadingを使うWordPressサイトは、1年前は1%だったのに今では14%まで増えた</li>\n<li>\n<p>Chrome User Experience Report から収集したレポートによると、ページを閲覧したユーザーの75パーセンタイルの中央値はlazy-loadingありよりlazy-loadingなしのほうが高速にページ表示していた</p>\n<ul>\n<li>lazy-loadingなし: 2,922ms</li>\n<li>lazy-loadingあり: 3,546ms</li>\n</ul>\n</li>\n<li>\n<p>WordPressサイトに絞り込むと遅くなる傾向があった</p>\n<ul>\n<li>lazy-loadingなし: 3,495ms</li>\n<li>lazy-loadingあり: 3,768ms</li>\n</ul>\n</li>\n<li>WordPressのシングルページとアーカイブページをWebPageTestで計測したらアーカイブがlazy-loadingしているほうが遅いことが判明</li>\n<li>ページ内の画像のバイト数の中央値を比較すると、遅延読み込みしているほうがサイズは小さい。</li>\n<li>要するに、lazy-loadingは画像サイズの削減には役立つが、LCPの結果的には遅い</li>\n<li>ファーストビューでは見えない部分の画像だけをlazy-loadingしてみると結果が改善された</li>\n<li>画像のバイト数の中央値に変化はなかった</li>\n<li>ただWordPressはどの画像をlazy-loadingさせるかサーバー側で判定しているのでビューポートサイズはわからない</li>\n<li>\n<p>画像の相対的な位置をヒューリスティックな方法で判定するようにした</p>\n<ul>\n<li>画像が最初の注目すべき画像である場合、またはメインコンテンツの最初の画像の場合はビューポート内（または近い場所）にあると考える</li>\n<li>見出しの単語数や序盤の段落のテキスト量によっては画像がビューポートに影響するので考慮する</li>\n<li>アンカーリンクを使ってスクロール位置を変更する場合も考慮する</li>\n</ul>\n</li>\n<li>これらの方法は一般的には有効だが、すべてのケースで有効ではないため微調整が必要</li>\n<li>LCPの要素がlazy-loadingされた場合はコンソールに警告を出したりして改善するのが良い</li>\n<li>lazy-loadingを使っている場合は、実装方法を確認してA/Bテストを実行してパフォーマンスを確認すること</li>\n<li>ファーストビューに表示される画像はlazy-loadingではなく、eager loadingすること</li>\n<li>WordPressサイトの運営者はWordPress本体にパッチがリリースされることを願う</li>\n<li>比較的新しいAPIはリスクとメリットが両方ある。lazy-loadingは厄介な面もあるが、パフォーマンス向上のメリットもある</li>\n</ul>\n<hr>\n<h3 id=\"告知：ubie-tech-talk-5\" style=\"position:relative;\"><a href=\"#%E5%91%8A%E7%9F%A5%EF%BC%9Aubie-tech-talk-5\" aria-label=\"告知：ubie tech talk 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://ubietechtalk.connpass.com/event/219222/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">告知：Ubie Tech Talk #5</a></h3>\n<ul>\n<li>共有者: jmblog</li>\n</ul>\n<p>明日 7/28 18:00-19:00 に Ubie Tech Talk #5 を開催します</p>\n<ul>\n<li>今回は、デザイナー×エンジニアの雑談会のような感じでワイワイ話します。</li>\n<li>YouTube Live で配信予定（音声のみ）です。夕方の時間なので、作業しながらのBGMにもどうぞ！</li>\n</ul>\n<hr>","frontmatter":{"title":"Cybozu Frontend Monthly","date":"2021-07-27T17:00:00+09:00","no":13,"connpass":"https://cybozu.connpass.com/event/218880/","streamUrl":"https://www.youtube.com/watch?v=SAEzDJE2Uqw","hashTag":null,"members":[{"name":"@koba04","link":"https://twitter.com/koba04"},{"name":"@pirosikick","link":"https://twitter.com/pirosikick"},{"name":"@__sakito__","link":"https://twitter.com/__sakito__"},{"name":"@shisama_","link":"https://twitter.com/shisama_"},{"name":"@nakajmg","link":"https://twitter.com/nakajmg"},{"name":"@b4h0_c4t","link":"https://twitter.com/b4h0_c4t"},{"name":"@mugi_uno","link":"https://twitter.com/mugi_uno"}],"guest":[{"name":"@jmblog","link":"https://twitter.com/jmblog"},{"name":"@yuku","link":"https://twitter.com/MonchiFC"}]}}},"pageContext":{"id":"9cb231e8-c01a-5b78-aa8c-96e9ff6e9679"}},"staticQueryHashes":["764694655"]}